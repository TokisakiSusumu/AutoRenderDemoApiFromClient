@page "/login"
@using AutoRender.Client.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Yardify.Frontend.Client.Interfaces.Authentication
@inject IYardifyAuthenticationService AuthService
@inject NavigationManager Navigation
@rendermode InteractiveAuto

<h3>Login</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<EditForm Model="loginRequest" OnValidSubmit="HandleLogin">
    <div class="form-group mb-3">
        <label>Email:</label>
        <InputText @bind-Value="loginRequest.Email" class="form-control" />
    </div>
    <div class="form-group mb-3">
        <label>Password:</label>
        <InputText @bind-Value="loginRequest.Password" type="password" class="form-control" />
    </div>
    <button type="submit" class="btn btn-primary" disabled="@isLoading">
        @if (isLoading)
        {
            <span>Logging in...</span>
        }
        else
        {
            <span>Login</span>
        }
    </button>
</EditForm>

@code {
    private LoginRequestDTO loginRequest = new();
    private string errorMessage = "";
    private bool isLoading = false;

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;
            errorMessage = "";

            var success = await AuthService.LoginAsync(loginRequest);
            if (success)
            {
                // Force a full page reload to refresh authentication state
                var url = !string.IsNullOrEmpty(ReturnUrl) ? ReturnUrl : "/";
                Navigation.NavigateTo(url, forceLoad: true);
            }
            else
            {
                errorMessage = "Login failed. Please check your credentials.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Login failed. Please check your credentials.";
            Console.WriteLine($"Login error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
}