@page "/weather"
@using AutoRender.Client.Models
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager Navigation
@attribute [Authorize]
@inject IWeatherForecastService WeatherForecastService
@rendermode InteractiveAuto

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data from the API.</p>
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-warning">@errorMessage</div>
}
else if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else if (!forecasts.Any())
{
    <p><em>No weather data available.</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            forecasts = await WeatherForecastService.GetWeatherForecastsAsync();
        }
        catch (InvalidOperationException ex) when (ex.Message.Contains("expired"))
        {
            // Session expired - redirect to login
            errorMessage = "Your session has expired. Redirecting to login...";
            await Task.Delay(2000);
            Navigation.NavigateTo("/login", forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading weather data: {ex.Message}");
            forecasts = Array.Empty<WeatherForecast>();
        }
    }
}